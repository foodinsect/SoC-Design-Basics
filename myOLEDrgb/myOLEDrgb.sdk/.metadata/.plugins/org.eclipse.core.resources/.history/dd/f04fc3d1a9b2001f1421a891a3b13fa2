#include "bitmap.h"        // Include the bitmap header file
#include "myoledrgb.h"
#include "xparameters.h"
#include "xil_io.h"
#include "xil_types.h"
#include "sleep.h"
#include "xil_printf.h"

// Base address of the OLED controller
#define OLED_BASEADDR XPAR_MYOLEDRGB_0_S00_AXI_BASEADDR

// OLED controller register offsets
#define REG_START         0x00  // Start register
#define REG_BUSY          0x04  // Busy status register
#define REG_PIXEL_DATA    0x08  // Pixel data register
#define REG_PIXEL_VALID   0x0C  // Pixel valid register
#define REG_SPI_DONE      0x10
#define REG_SPI_BUSY      0x14

// Function prototypes
void oled_init();
void send_pixel_data(const uint8_t *pixel_data, u32 pixel_count);

int main() {
    // Initialize the OLED display
    oled_init();

    // Use `foodbug` bitmap directly as the pixel data source
    send_pixel_data(foodbug, 12288);

    // Main loop
    while (1) {
        // Optional: Add any display update logic here
    }

    return 0;
}

// OLED initialization function
void oled_init() {
    xil_printf("Initializing OLED...\n");
    MYOLEDRGB_mWriteReg(OLED_BASEADDR, REG_START, 1);
    xil_printf("Start register written.\n");

    // Clear the start register
    MYOLEDRGB_mWriteReg(OLED_BASEADDR, REG_START, 0);
    xil_printf("Start register cleared.\n");

    xil_printf("Initialization complete.\n");
}

// Function to send pixel data to the OLED controller
void send_pixel_data(const uint8_t *pixel_data, u32 pixel_count) {
    u32 i;

    for (i = 0; i < pixel_count; i++) {
        // Wait for SPI to be ready
        while (MYOLEDRGB_mReadReg(OLED_BASEADDR, REG_SPI_BUSY) & 0x1) {
            xil_printf("SPI is busy at pixel %d...\n", i);
        }

        // Write pixel data to register
        MYOLEDRGB_mWriteReg(OLED_BASEADDR, REG_PIXEL_DATA, pixel_data[i]);
        xil_printf(MYOLEDRGB_mReadReg(OLED_BASEADDR, REG_PIXEL_DATA));
        MYOLEDRGB_mWriteReg(OLED_BASEADDR, REG_PIXEL_VALID, 1); // Trigger pixel valid
        xil_printf(MYOLEDRGB_mReadReg(OLED_BASEADDR, REG_PIXEL_VALID));

        // Wait for SPI transfer to complete
        while (!(MYOLEDRGB_mReadReg(OLED_BASEADDR, REG_SPI_DONE) & 0x1)) {
            // Waiting for SPI_DONE
        }

        // Clear SPI_DONE and REG_PIXEL_VALID
        MYOLEDRGB_mWriteReg(OLED_BASEADDR, REG_PIXEL_VALID, 0);

        xil_printf("Pixel %d sent: 0x%02X\n", i, pixel_data[i]);
    }

    xil_printf("Pixel data transmission complete.\n");
}
