/*
 * main.c
 *
 *  Created on: 2024. 11. 30.
 *      Author: foodbug
 */
#include "xil_io.h"
#include "stdio.h"
#include "xparameters.h"
#include "mymaxsonar.h"
#include "xuartps.h"

XUartPs Uart; // UART 인스턴스

void UartInit() {
    XUartPs_Config *Config;

    // UART 설정 가져오기
    Config = XUartPs_LookupConfig(XPAR_PS7_UART_1_DEVICE_ID);
    if (Config == NULL) {
        xil_printf("UART Configuration Error\n");
        return;
    }

    // UART 초기화
    XUartPs_CfgInitialize(&Uart, Config, Config->BaseAddress);

    // Baud Rate 설정
    XUartPs_SetBaudRate(&Uart, 9600);
}

#define MAX_BUFFER_SIZE 10

void ReadDistance() {
    u8 Buffer[MAX_BUFFER_SIZE];
    int ReceivedCount = 0;

    // 데이터 수신
    ReceivedCount = XUartPs_Recv(&Uart, Buffer, sizeof(Buffer));

    if (ReceivedCount > 0) {
        // 데이터가 "R123\r" 형식인지 확인
        if (Buffer[0] == 'R' && Buffer[4] == '\r') {
            // 거리 값 추출 (ASCII → 정수 변환)
            int distance = (Buffer[1] - '0') * 100 +
                           (Buffer[2] - '0') * 10 +
                           (Buffer[3] - '0');

            // 거리 출력
            xil_printf("Distance: %d inches\n", distance);
        } else {
            xil_printf("Invalid Data: %s\n", Buffer);
        }
    }
}


// Delay 함수: 간단한 루프를 사용한 딜레이
void Delay(unsigned int n)
{
    volatile unsigned int i;
    for (i = 0; i < n; i++);
}

int main()
{
    unsigned int pwm_status, pulse_width, distance;

    // UART 초기화
    UartInit();

    xil_printf("Pmod MAXSONAR UART Test\n");

    while (1) {
    	// 거리 데이터 읽기
		ReadDistance();

		// 간단한 딜레이 (50ms)
		for (volatile int i = 0; i < 1000000; i++);
    }

    while (0) {
        // PWM 상태 읽기
        pwm_status = MYMAXSONAR_mReadReg(XPAR_MYMAXSONAR_0_S00_AXI_BASEADDR, 0); // PWM 현재 상태
        // 펄스 길이 읽기
        pulse_width = MYMAXSONAR_mReadReg(XPAR_MYMAXSONAR_0_S00_AXI_BASEADDR, 4); // 펄스 길이
        // 거리 계산 (하드웨어에서 계산된 거리 값 읽기)
        distance = MYMAXSONAR_mReadReg(XPAR_MYMAXSONAR_0_S00_AXI_BASEADDR, 8); // 거리 값

        // 읽은 데이터 출력
        printf("PWM Status: 0x%x, Pulse Width: %u, Distance: %u inches\n", pwm_status, pulse_width, distance);

        // 딜레이
        Delay(10e6);
    }

    return 0;
}
